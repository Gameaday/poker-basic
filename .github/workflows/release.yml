name: Release and Development Builds

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - alpha
          - release

# Concurrency control: Only allow one release build at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up Java 17
      uses: actions/setup-java@v5
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Determine release type and version
      id: release_info
      run: |
        # Get version from Gradle
        VERSION=$(./gradlew properties -q | grep "^version:" | head -1 | awk '{print $2}')
        TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
        
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Official release from tag
          RELEASE_TYPE="release"
          TAG_NAME="${{ github.ref_name }}"
          RELEASE_NAME="Pokermon ${TAG_NAME}"
          IS_PRERELEASE="false"
        elif [[ "${{ github.event.inputs.release_type }}" == "alpha" ]] || [[ "${{ github.ref_name }}" == alpha-* ]]; then
          # Alpha release
          RELEASE_TYPE="alpha"
          TAG_NAME="alpha-${VERSION}-${TIMESTAMP}"
          RELEASE_NAME="Pokermon Alpha ${VERSION}"
          IS_PRERELEASE="true"
        else
          # Development build (master/main branch push)
          RELEASE_TYPE="development"
          TAG_NAME="dev-${VERSION}-${TIMESTAMP}"
          RELEASE_NAME="Pokermon Development Build ${VERSION}"
          IS_PRERELEASE="true"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
        echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
        
        echo "Release Info:"
        echo "  Type: ${RELEASE_TYPE}"
        echo "  Version: ${VERSION}"
        echo "  Tag: ${TAG_NAME}"
        echo "  Name: ${RELEASE_NAME}"
        echo "  Pre-release: ${IS_PRERELEASE}"
    
    - name: Run tests
      run: |
        echo "=== Running tests before release ==="
        ./gradlew :shared:test --no-daemon
    
    - name: Build JAR
      run: |
        echo "=== Building release JAR ==="
        
        # Set optimization flags for production builds
        if [[ "${{ steps.release_info.outputs.release_type }}" == "release" ]]; then
          echo "Building production JAR with full optimizations"
          GRADLE_PROPERTIES=""
        else
          echo "Building development/alpha JAR with debug information"
          GRADLE_PROPERTIES="-PdevelopmentBuild=true"
        fi
        
        ./gradlew :shared:fatJar --no-daemon $GRADLE_PROPERTIES
        
        # Verify JAR was created
        if [ -f "shared/build/libs/pokermon-${{ steps.release_info.outputs.version }}-fat.jar" ]; then
          echo "‚úÖ JAR created successfully"
          ls -la shared/build/libs/pokermon-*.jar
        else
          echo "‚ùå JAR build failed"
          exit 1
        fi
    
    - name: Build Native Executables
      run: |
        echo "=== Building native executables ==="
        
        # Set development build property for debug builds
        if [[ "${{ steps.release_info.outputs.release_type }}" == "development" ]] || [[ "${{ steps.release_info.outputs.release_type }}" == "alpha" ]]; then
          echo "Building development/alpha versions with debug suffix"
          GRADLE_PROPERTIES="-PdevelopmentBuild=true"
        else
          echo "Building production versions with full optimizations"
          GRADLE_PROPERTIES=""
        fi
        
        # Build all platform executables with proper optimization flags
        # Note: Desktop build.gradle now creates fallback files with expected names
        # when jpackage fails, ensuring DRY compliance with upload steps below
        ./gradlew :desktop:packagewindows --no-daemon $GRADLE_PROPERTIES
        ./gradlew :desktop:packagelinux --no-daemon $GRADLE_PROPERTIES
        ./gradlew :desktop:packagemacos --no-daemon $GRADLE_PROPERTIES
        
        echo "‚úÖ Native executables built successfully"
        ls -la desktop/build/distributions/
    
    - name: Build Android APK
      run: |
        echo "=== Building Android APK ==="
        
        # Set development build property for debug builds
        if [[ "${{ steps.release_info.outputs.release_type }}" == "development" ]] || [[ "${{ steps.release_info.outputs.release_type }}" == "alpha" ]]; then
          echo "Building development/alpha APK with debug suffix"
          GRADLE_PROPERTIES="-PdevelopmentBuild=true"
        else
          echo "Building production APK with full optimizations"
          GRADLE_PROPERTIES=""
        fi
        
        # Build Android APK (may fail in sandboxed environments without internet)
        set +e  # Don't fail the entire workflow if Android build fails
        ./gradlew :android:packageAndroidApk --no-daemon $GRADLE_PROPERTIES
        ANDROID_BUILD_RESULT=$?
        set -e
        
        if [ $ANDROID_BUILD_RESULT -eq 0 ]; then
          echo "‚úÖ Android APK built successfully"
          ls -la android/build/distributions/ || echo "No Android distributions found"
          ls -la android/build/outputs/apk/debug/ || echo "No Android APK found"
        else
          echo "‚ö†Ô∏è Android APK build failed (likely due to network requirements)"
          echo "Continuing with other builds..."
          # Create empty marker file so upload step can handle gracefully
          mkdir -p android/build/distributions
          echo "Android build failed - requires internet access" > android/build/distributions/android-build-failed.txt
        fi
    
    - name: Test JAR functionality
      run: |
        echo "=== Testing JAR functionality ==="
        JAR_FILE="shared/build/libs/pokermon-${{ steps.release_info.outputs.version }}-fat.jar"
        
        # Test help command
        java -jar "$JAR_FILE" --help | head -10
        echo ""
        
        # Test version command
        echo "Version check:"
        java -jar "$JAR_FILE" --version
        echo ""
        echo "‚úÖ JAR functionality verified"
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_info.outputs.tag_name }}
        release_name: ${{ steps.release_info.outputs.release_name }}
        draft: false
        prerelease: ${{ steps.release_info.outputs.is_prerelease }}
        body: |
          # ${{ steps.release_info.outputs.release_name }}
          
          **Release Type:** ${{ steps.release_info.outputs.release_type }}
          **Version:** ${{ steps.release_info.outputs.version }}
          **Build Date:** ${{ steps.release_info.outputs.timestamp }}
          **Commit:** ${{ github.sha }}
          
          ## What's New
          This ${{ steps.release_info.outputs.release_type }} build includes the latest changes and improvements to the Pokermon poker game.
          
          ## Download and Run
          
          ### üè™ Available Downloads
          - **üì± Android APK**: `Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.apk` (may not be available if build failed)
          - **üñ•Ô∏è Windows**: `Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.exe`
          - **üêß Linux**: `Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.deb`
          - **üçé macOS**: `Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.dmg`
          - **‚òï JAR (All Platforms)**: `pokermon-${{ steps.release_info.outputs.version }}.jar`
          
          ### Requirements
          - **JAR**: Java 17 or higher
          - **Native Executables**: No additional dependencies required
          - **Android**: Android 9+ (API 28+)
          
          ### Quick Start
          
          #### JAR (Cross-Platform)
          ```bash
          # Download the JAR file from the Assets section below
          
          # Run with GUI (default)
          java -jar pokermon-${{ steps.release_info.outputs.version }}.jar
          
          # Run in console mode
          java -jar pokermon-${{ steps.release_info.outputs.version }}.jar --basic
          
          # Show help
          java -jar pokermon-${{ steps.release_info.outputs.version }}.jar --help
          
          # Show version
          java -jar pokermon-${{ steps.release_info.outputs.version }}.jar --version
          ```
          
          #### Native Executables
          - **Windows**: Double-click the `.exe` file or run from command line
          - **Linux**: Install the `.deb` package or run directly
          - **macOS**: Mount the `.dmg` and run the application
          - **Android**: Install the `.apk` file (enable "Unknown sources" if needed)
          
          ### üìù File Naming Convention
          - **Compressed Downloads**: Include full version number and `-debug` suffix for development builds
          - **After Extraction**: Files are named generically (`pokermon.exe`, `pokermon.apk`, etc.) to replace older versions
          - **Version Information**: Available in application help/about and embedded in manifests
          
          ## Game Features
          - Multiple poker variants and game modes
          - Monster collection mechanics (Adventure, Safari, Ironman modes)
          - AI opponents with different difficulty levels
          - Cross-platform compatibility (Windows, Linux, macOS, Android)
          - Pure Kotlin-native implementation
          
          ## Educational Project
          This is an educational project demonstrating:
          - Cross-platform game development with Kotlin
          - Modern CI/CD practices with automated native builds
          - Gradle build system usage
          - Test-driven development
          
          ## Creator
          All game coding and concepts by Carl Nelson (@Gameaday)
          
          ---
          
          **Note:** ${{ steps.release_info.outputs.release_type == 'development' && 'This is a development build and may contain experimental features.' || steps.release_info.outputs.release_type == 'alpha' && 'This is an alpha release for testing purposes.' || 'This is an official release.' }}
    
    - name: Upload JAR Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: shared/build/libs/pokermon-${{ steps.release_info.outputs.version }}-fat.jar
        asset_name: pokermon-${{ steps.release_info.outputs.version }}.jar
        asset_content_type: application/java-archive
    
    - name: Upload Windows Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.exe') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.exe
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Linux Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.deb') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.deb
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.deb
        asset_content_type: application/vnd.debian.binary-package
    
    - name: Upload macOS Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.dmg') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.dmg
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.dmg
        asset_content_type: application/x-apple-diskimage
    
    - name: Upload Windows Launcher (fallback)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.bat') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.bat
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.bat
        asset_content_type: text/plain
    
    - name: Upload Linux Launcher (fallback)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.sh') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.sh
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.sh
        asset_content_type: text/x-shellscript
    
    - name: Upload macOS Launcher (fallback)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('desktop/build/distributions/Pokermon-*.command') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.command
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.command
        asset_content_type: text/plain
    
    - name: Upload Android APK (if available)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: hashFiles('android/build/distributions/Pokermon-*.apk') != ''
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: android/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.apk
        asset_name: Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.apk
        asset_content_type: application/vnd.android.package-archive
    
    - name: Build summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Release Created:** ${{ steps.release_info.outputs.release_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Release Assets:" >> $GITHUB_STEP_SUMMARY
        echo "- **JAR:** pokermon-${{ steps.release_info.outputs.version }}.jar" >> $GITHUB_STEP_SUMMARY
        
        # Check which platform executables were actually built and uploaded
        if [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.exe" ]; then
          echo "- **Windows:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.exe (native)" >> $GITHUB_STEP_SUMMARY
        elif [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.bat" ]; then
          echo "- **Windows:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.bat (launcher)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Windows:** ‚ö†Ô∏è Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.deb" ]; then
          echo "- **Linux:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.deb (native)" >> $GITHUB_STEP_SUMMARY
        elif [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.sh" ]; then
          echo "- **Linux:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.sh (launcher)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Linux:** ‚ö†Ô∏è Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.dmg" ]; then
          echo "- **macOS:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.dmg (native)" >> $GITHUB_STEP_SUMMARY
        elif [ -f "desktop/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.command" ]; then
          echo "- **macOS:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.command (launcher)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **macOS:** ‚ö†Ô∏è Build failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check if Android APK was built successfully
        if [ -f "android/build/distributions/Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.apk" ]; then
          echo "- **Android:** Pokermon-${{ steps.release_info.outputs.version }}${{ steps.release_info.outputs.release_type != 'release' && '-debug' || '' }}.apk" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Android:** ‚ö†Ô∏è Build failed (requires internet access)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üè∑Ô∏è **Tag:** ${{ steps.release_info.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Release URL:** ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Build Notes:" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Type:** ${{ steps.release_info.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Info:** Embedded in application manifests" >> $GITHUB_STEP_SUMMARY
        echo "- **Uncompressed Names:** pokermon.exe, pokermon.deb, pokermon.dmg, pokermon.apk" >> $GITHUB_STEP_SUMMARY
        echo "- **Compressed Names:** Include full version and debug suffix for development builds" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The release is ready for download and testing!" >> $GITHUB_STEP_SUMMARY