/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pokermon;

/**
 *
 * @author Lilly the Ninja
 */
import java.awt.*;
import javax.swing.*;

public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setVisible(false);
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setVisible(false);
        jLabel4 = new javax.swing.JLabel();
        jLabel4.setVisible(false);
        jLabel5 = new javax.swing.JLabel();
        jLabel5.setVisible(false);
        jLabel6 = new javax.swing.JLabel();
        jLabel6.setVisible(false);
        jLabel7 = new javax.swing.JLabel();
        jLabel7.setVisible(false);
        jLabel1 = new javax.swing.JLabel();
        jLabel1.setVisible(false);
        jLabel8 = new javax.swing.JLabel();
        jLabel8.setVisible(false);
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton3.setVisible(false);
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton4.setVisible(false);
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton5.setVisible(false);
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton2.setVisible(false);
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton1.setVisible(false);
        jButton1 = new javax.swing.JButton();
        jButton1.setVisible(false);
        jTextField1 = new javax.swing.JTextField();
        jTextField1.setVisible(false);
        jLabel9 = new javax.swing.JLabel();
        jLabel9.setVisible(false);
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox1.setVisible(false);
        jLabel10 = new javax.swing.JLabel();
        jLabel10.setVisible(false);
        jButton2 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel11.setVisible(false);
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox2.setVisible(false);
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel13.setVisible(false);
        jButton3 = new javax.swing.JButton();
        jButton3.setVisible(false);
        jLabel14 = new javax.swing.JLabel();
        jLabel14.setVisible(false);
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox3.setVisible(false);
        jComboBox4 = new javax.swing.JComboBox();
        jComboBox4.setVisible(false);
        jLabel15 = new javax.swing.JLabel();
        jLabel15.setVisible(false);
        jLabel16 = new javax.swing.JLabel();
        jLabel16.setVisible(false);
        jButton4 = new javax.swing.JButton();
        jButton4.setVisible(false);
        jButton5 = new javax.swing.JButton();
        jButton5.setVisible(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("cpu 1");
        jLayeredPane1.add(jLabel2);
        jLabel2.setBounds(40, 10, 50, 14);

        jLabel3.setText("Chips:");
        jLayeredPane1.add(jLabel3);
        jLabel3.setBounds(40, 30, 70, 14);

        jLabel4.setText("cpu 2");
        jLayeredPane1.add(jLabel4);
        jLabel4.setBounds(240, 10, 50, 14);

        jLabel5.setText("Chips:");
        jLayeredPane1.add(jLabel5);
        jLabel5.setBounds(240, 30, 70, 14);

        jLabel6.setText("cpu 3");
        jLayeredPane1.add(jLabel6);
        jLabel6.setBounds(450, 10, 90, 14);

        jLabel7.setText("Chips:");
        jLayeredPane1.add(jLabel7);
        jLabel7.setBounds(450, 30, 80, 14);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pot: ");
        jLayeredPane1.add(jLabel1);
        jLabel1.setBounds(260, 100, 70, 40);

        jLabel8.setText("Your Chips:");
        jLayeredPane1.add(jLabel8);
        jLabel8.setBounds(10, 220, 100, 14);

        jToggleButton3.setText("jToggleButton3");
        jToggleButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jToggleButton3.setBorderPainted(false);
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jToggleButton3);
        jToggleButton3.setBounds(230, 250, 90, 126);

        jToggleButton4.setText("jToggleButton4");
        jToggleButton4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jToggleButton4.setBorderPainted(false);
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jToggleButton4);
        jToggleButton4.setBounds(330, 250, 90, 126);

        jToggleButton5.setText("jToggleButton5");
        jToggleButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jToggleButton5.setBorderPainted(false);
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jToggleButton5);
        jToggleButton5.setBounds(430, 250, 90, 126);

        jToggleButton2.setText("jToggleButton2");
        jToggleButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jToggleButton2.setBorderPainted(false);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jToggleButton2);
        jToggleButton2.setBounds(130, 250, 90, 126);

        jToggleButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Cards/TET/Ace of Diamonds.jpg"))); // NOI18N
        jToggleButton1.setText("U+1F0A1\n");
        jToggleButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jToggleButton1.setBorderPainted(false);
        jToggleButton1.setPreferredSize(new java.awt.Dimension(180, 252));
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jToggleButton1);
        jToggleButton1.setBounds(30, 250, 90, 126);

        jButton1.setText("Replace Selected Cards");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton1);
        jButton1.setBounds(200, 380, 145, 20);

        jTextField1.setText("A(n) Drew Hussie");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jTextField1);
        jTextField1.setBounds(200, 160, 120, 30);

        jLabel9.setText("Enter a name for your player:");
        jLayeredPane1.add(jLabel9);
        jLabel9.setBounds(0, 160, 190, 30);

        jComboBox1.setMaximumRowCount(3);
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jComboBox1);
        jComboBox1.setBounds(300, 170, 56, 20);

        jLabel10.setText("How many computer players will you play against?");
        jLayeredPane1.add(jLabel10);
        jLabel10.setBounds(0, 170, 240, 14);

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton2);
        jButton2.setBounds(240, 60, 57, 23);

        jLabel11.setText("Select the starting chip quantity");
        jLayeredPane1.add(jLabel11);
        jLabel11.setBounds(0, 170, 200, 14);

        jComboBox2.setMaximumRowCount(3);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "500", "2500" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jComboBox2);
        jComboBox2.setBounds(220, 170, 70, 20);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("POKER");
        jLayeredPane1.add(jLabel12);
        jLabel12.setBounds(240, 82, 90, 30);

        jLabel13.setText("Setup:");
        jLayeredPane1.add(jLabel13);
        jLabel13.setBounds(10, 140, 60, 14);

        jButton3.setText("Play Poker");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton3);
        jButton3.setBounds(220, 130, 90, 23);

        jLabel14.setText("How much will you bet?");
        jLayeredPane1.add(jLabel14);
        jLabel14.setBounds(210, 190, 140, 14);

        jComboBox3.setMaximumRowCount(4);
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "10", "50", "100" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jComboBox3);
        jComboBox3.setBounds(230, 220, 43, 20);

        jComboBox4.setMaximumRowCount(4);
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "10", "50", "100" }));
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jComboBox4);
        jComboBox4.setBounds(230, 210, 43, 20);

        jLabel15.setText("VICTORY MESSAGE");
        jLayeredPane1.add(jLabel15);
        jLabel15.setBounds(200, 140, 250, 30);

        jLabel16.setText("Would you like to play again?");
        jLayeredPane1.add(jLabel16);
        jLabel16.setBounds(160, 170, 270, 14);

        jButton4.setText("Yes");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton4);
        jButton4.setBounds(180, 200, 49, 23);

        jButton5.setText("No");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jLayeredPane1.add(jButton5);
        jButton5.setBounds(280, 200, 45, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // Toggle border to show selection state
        if (jToggleButton1.isSelected()) {
            jToggleButton1.setBorderPainted(true);
        } else {
            jToggleButton1.setBorderPainted(false);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

        playerName = jTextField1.getText();
        jLabel9.setVisible(false);
        jTextField1.setVisible(false);
        jLabel10.setVisible(true);
        jComboBox1.setVisible(true);
        System.out.println(playerName);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        Object gameSize = jComboBox1.getSelectedItem();
        playerCount = (int) Integer.valueOf(gameSize.toString());
        System.out.println(playerCount);
        jLabel10.setVisible(false);
        jComboBox1.setVisible(false);
        jLabel11.setVisible(true);
        jComboBox2.setVisible(true);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton2.setVisible(false);
        jLabel9.setVisible(true);
        jTextField1.setVisible(true);
        jLabel13.setVisible(true);


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        Object initialChips = jComboBox2.getSelectedItem();
        chipsInitial = (int) Integer.valueOf(initialChips.toString());
        System.out.println(chipsInitial);
        jLabel11.setVisible(false);
        jComboBox2.setVisible(false);
        jLabel13.setVisible(false);
        jButton3.setVisible(true);
        jLabel1.setVisible(true);
        updatePot();
        selectionRefresh();
        players = new String[playerCount + 1];
        list = new Player[players.length];

//add your name to list
        players[0] = playerName;

//Decide names for the Computer players
        Main.decideNames(players);
        Main.setupList(list, USER, CPU1, CPU2, CPU3);
        //updatePlayerChips(); DO THIS ONCE EVERYTHING IS INITIALIZED
//prompt for number of players to play against:
//int playerCount = promptChallengers();

//prompt for starting chip quantity:
//int chipsInitial = promptChips();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jButton3.setVisible(false);
        //remeber, if continue, jus tmake this button visible again.
        //initialize the Deck
        selectionRefresh();
        int[] Deck = Main.setDeck();
        if (countup < 1) {
            //Initialize players with hands, names, and chips
            InitializePlayers(list, players, chipsInitial, Deck);
            countup = 1;
            InitialPlayerChips();
        } else {
            InitializePlayers(list, players, Deck);
        }
        updatePlayerChips();
//show player his hand
        revealHand(list[0].getConvertedHand()); //rewrite not using joptionpane
//have player bet
        jComboBox3.setVisible(true);
        jLabel14.setVisible(true);


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        /*if (keepCards[1]) {
         keepCards[1] = false;
         } else if (!keepCards[1]) {
         keepCards[1] = true;
         }*/
        if (jToggleButton2.isSelected()) {
            jToggleButton2.setBorderPainted(true);
        } else {
            jToggleButton2.setBorderPainted(false);
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        /*if (keepCards[2]) {
         keepCards[2] = false;
         } else if (!keepCards[2]) {
         keepCards[2] = true;
         }*/
        if (jToggleButton3.isSelected()) {
            jToggleButton3.setBorderPainted(true);
        } else {
            jToggleButton3.setBorderPainted(false);
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        /*if (keepCards[3]) {
         keepCards[3] = false;
         } else if (!keepCards[3]) {
         keepCards[3] = true;
         }*/
        if (jToggleButton4.isSelected()) {
            jToggleButton4.setBorderPainted(true);
        } else {
            jToggleButton4.setBorderPainted(false);
        }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
       /* if (keepCards[4]) {
         keepCards[4] = false;
         } else if (!keepCards[4]) {
         keepCards[4] = true;
         }*/
        if (jToggleButton5.isSelected()) {
            jToggleButton5.setBorderPainted(true);
        } else {
            jToggleButton5.setBorderPainted(false);
        }
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        selectionCheck();
        Object selectedBet = jComboBox3.getSelectedItem();
        System.out.println(Integer.valueOf(selectedBet.toString()));
        if (Integer.valueOf(selectedBet.toString()) > list[0].getChips()) {
            System.out.println("invalid bet, try again.");
        } else {
            jComboBox3.setVisible(false);
            jLabel14.setVisible(false);

            bet = (int) Integer.valueOf(selectedBet.toString());
            updatePlayerChips();
            workingPot = bet(list, workingPot, bet);
        //updatePlayerChips();
            //report current pot value
            System.out.println("Current Pot Value: " + workingPot);
            updatePot();
            jButton1.setVisible(true);
            jToggleButton1.setEnabled(true);
            jToggleButton2.setEnabled(true);
            jToggleButton3.setEnabled(true);
            jToggleButton4.setEnabled(true);
            jToggleButton5.setEnabled(true);

        }
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //have player exchange cards
        jButton1.setVisible(false);
        selectionCheck();
        Exchange(list[0], Deck);//needs serious rewrites, possibly entirely new method

//report new hand
        System.out.println();
        revealHand2(list[0].getConvertedHand());//rewrite
        jComboBox4.setVisible(true);
        jLabel14.setVisible(true);
//have player bet again

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed

        Object selectedBet = jComboBox4.getSelectedItem();
        if (Integer.valueOf(selectedBet.toString()) > list[0].getChips()) {
            System.out.println("invalid bet, try again.");
        } else {
            jComboBox4.setVisible(false);
            jLabel14.setVisible(false);

            bet = (int) Integer.valueOf(selectedBet.toString());
            updatePlayerChips();
            workingPot = bet(list, workingPot, bet);
//report current pot value
            System.out.println("Current Pot Value: " + workingPot);
//playersStats(list);

//Declare results
            declareResults(list); //rewrite
//divide the pot between the winner(s), note gives 100% to all winners currently
            Main.dividePot(list, workingPot);
            updatePlayerChips();
            updatePot();
//save updated stats to file
            Main.playersStats(list); //make a gui display version of printPlayer
            jButton4.setVisible(true);
            jButton5.setVisible(true);
            jLabel16.setVisible(true);
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Start new round - reset pot and UI
        workingPot = 0;
        updatePot();
        jButton4.setVisible(false);
        jButton5.setVisible(false);
        jLabel16.setVisible(false);
        jLabel15.setVisible(false);
        jButton3.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jButton5.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    // End of variables declaration//GEN-END:variables
//char[] cards ={U+1F0A1,};
    //look up exactly how the hell i displaty this stuff anyway
    int workingPot = 0, topBet = 0, countup = 0;
    boolean Continue = true;
    boolean Quit = false;
    String[] players;
    Player USER = null, CPU1 = null, CPU2 = null, CPU3 = null;
    Player[] list;
    String playerName;
    boolean[] keepCards = new boolean[5];
    int playerCount;
    int chipsInitial;
    int bet = 0;
    int[] Deck = Main.setDeck();

    private void updatePot() {
        jLabel1.setText("Pot: " + workingPot);
        //set jlablel pot display text to the value of whatevers in the pot 
    }

    private void updatePlayerChips(int playerIndex) {
        switch (playerIndex) {
            case 0:
                jLabel8.setText("Your Chips: " + USER.getChips());
                break;
            case 1:
                jLabel3.setText("Chips: " + CPU1.getChips());
                break;
            case 2:
                jLabel5.setText("Chips: " + CPU2.getChips());
                break;
            case 3:
                jLabel7.setText("Chips: " + CPU3.getChips());
        }
    }

    private void updatePlayerChips() {
        //jalbels 8(you) 3(cpu1) 5(cpu2) 7(cpu 3)

        switch (playerCount) {
            case 3:
                jLabel7.setText("Chips: " + list[3].getChips());
            case 2:
                jLabel5.setText("Chips: " + list[2].getChips());
            case 1:
                jLabel3.setText("Chips: " + list[1].getChips());
            case 0:
                jLabel8.setText("Your Chips: " + list[0].getChips());
        }
    }

    private void InitialPlayerChips() {
        //jalbels 8(you) 3(cpu1) 5(cpu2) 7(cpu 3)
        jLabel8.setText("Your Chips: " + chipsInitial);
        jLabel3.setText("Chips: " + chipsInitial);
        jLabel5.setText("Chips: " + chipsInitial);
        jLabel7.setText("Chips: " + chipsInitial);
    }

    private void selectionRefresh() {
        for (int i = 0; i < 5; i++) {
            keepCards[i] = true;
        }
    }

    private void selectionCheck() {
        for (int i = 0; i < 5; i++) {

            switch (i) {
                case 0:
                    if (jToggleButton1.isSelected()) {
                        keepCards[i] = false;
                    }

                    break;
                case 1:
                    if (jToggleButton2.isSelected()) {
                        keepCards[i] = false;
                    }
                    break;
                case 2:
                    if (jToggleButton3.isSelected()) {
                        keepCards[i] = false;
                    }
                    break;
                case 3:
                    if (jToggleButton4.isSelected()) {
                        keepCards[i] = false;
                    }
                    break;
                case 4:
                    if (jToggleButton5.isSelected()) {
                        keepCards[i] = false;
                    }

            }
        }

    }
    /* private String promptName(){
     jLabel9.setVisible(true);
     jTextField1.setVisible(true);
     actionListener l = new actionListener(jTextField1);
     while(jTextField1.getText()==null || jTextField1.getText()=="A(n) Drew Hussie"){
     if(jTextField1.) return jTextField1.getText();
     }
     return jTextField1.getText();
     }*/

    /**
     * Initializes all players with hands, names, and chips, and sets up the UI labels.
     * @param list the array of players to initialize
     * @param players the array of player names
     * @param chipsInitial the initial number of chips for each player
     * @param deck the deck to draw cards from
     */
    private void InitializePlayers(Player[] list, String[] players, int chipsInitial, int[] deck) {
        // Arrays to store the UI labels for each player type
        JLabel[] nameLabels = {null, jLabel2, jLabel4, jLabel6}; // CPU name labels
        JLabel[] chipLabels = {jLabel8, jLabel3, jLabel5, jLabel7}; // Chip labels for all players
        
        for (int i = 0; i < players.length; i++) {
            Player player = new Player();
            player.setupPlayer(players[i], chipsInitial, deck);
            list[i] = player;
            
            // Set up UI labels based on player index
            if (i == 0) {
                // Human player
                jLabel8.setVisible(true);
            } else {
                // AI players (CPU1, CPU2, CPU3)
                if (nameLabels[i] != null) {
                    nameLabels[i].setVisible(true);
                    nameLabels[i].setText(player.getName());
                }
                if (chipLabels[i] != null) {
                    chipLabels[i].setVisible(true);
                }
            }
            
            System.out.println(); // places spaces between player info, for neatness
        }
    }

    /**
     * Re-initializes existing players with new hands while preserving their current chips and updating UI.
     * @param list the array of existing players to re-initialize
     * @param players the array of player names
     * @param deck the deck to draw cards from
     */
    private void InitializePlayers(Player[] list, String[] players, int[] deck) {
        // Arrays to store the UI labels for each player type
        JLabel[] nameLabels = {null, jLabel2, jLabel4, jLabel6}; // CPU name labels
        JLabel[] chipLabels = {jLabel8, jLabel3, jLabel5, jLabel7}; // Chip labels for all players
        
        for (int i = 0; i < players.length; i++) {
            Player player = list[i];
            player.setupPlayer(players[i], player.getChips(), deck);
            
            // Set up UI labels based on player index
            if (i == 0) {
                // Human player
                jLabel8.setVisible(true);
            } else {
                // AI players (CPU1, CPU2, CPU3)
                if (nameLabels[i] != null) {
                    nameLabels[i].setVisible(true);
                    nameLabels[i].setText(player.getName());
                }
                if (chipLabels[i] != null) {
                    chipLabels[i].setVisible(true);
                }
            }
            
            System.out.println(); // places spaces between player info, for neatness
        }
    }

    private void revealHand(String[] Hand) {
        ImageIcon icon;
        for (int i = 0; i < 5; i++) {
            icon = createImageIcon("/Cards/TET/" + Hand[i] + ".jpg");
            Image img = icon.getImage().getScaledInstance(90, 126, Image.SCALE_SMOOTH);
            icon.setImage(img);
            switch (i) {
                case 0:
                    jToggleButton1.setVisible(true);
                    jToggleButton1.setEnabled(false);
                    //jToggleButton1.setText(Hand[i]);
                    jToggleButton1.setText("");
                    jToggleButton1.setIcon(icon);
                    jToggleButton1.setDisabledIcon(icon);

                    break;
                case 1:
                    jToggleButton2.setVisible(true);
                    jToggleButton2.setEnabled(false);
                    //jToggleButton2.setText(Hand[i]);
                    jToggleButton2.setText("");
                    jToggleButton2.setIcon(icon);
                    jToggleButton2.setDisabledIcon(icon);
                    break;
                case 2:
                    jToggleButton3.setVisible(true);
                    jToggleButton3.setEnabled(false);
                    //jToggleButton3.setText(Hand[i]);
                    jToggleButton3.setText("");
                    jToggleButton3.setIcon(icon);
                    jToggleButton3.setDisabledIcon(icon);
                    break;
                case 3:
                    jToggleButton4.setVisible(true);
                    jToggleButton4.setEnabled(false);
                    //jToggleButton4.setText(Hand[i]);
                    jToggleButton4.setText("");
                    jToggleButton4.setIcon(icon);
                    jToggleButton4.setDisabledIcon(icon);
                    break;
                case 4:
                    jToggleButton5.setVisible(true);
                    jToggleButton5.setEnabled(false);
                    //jToggleButton5.setText(Hand[i]);
                    jToggleButton5.setText("");
                    jToggleButton5.setIcon(icon);
                    jToggleButton5.setDisabledIcon(icon);

            }
        }
    }

    private void revealHand2(String[] Hand) {
        ImageIcon icon;
        for (int i = 0; i < 5; i++) {
            icon = createImageIcon("/Cards/TET/" + Hand[i] + ".jpg");
            Image img = icon.getImage().getScaledInstance(90, 126, Image.SCALE_SMOOTH);
            icon.setImage(img);
            switch (i) {
                case 0:
                    jToggleButton1.setVisible(true);
                    //
                    // jToggleButton1.setText(Hand[i]);

                    jToggleButton1.setText("");
                    jToggleButton1.setIcon(icon);
                    jToggleButton1.setSelected(false);
                    jToggleButton1.setEnabled(false);
                    jToggleButton1.setDisabledIcon(icon);
                    jToggleButton1.setBorderPainted(false);
                    break;
                case 1:
                    jToggleButton2.setVisible(true);
                    //
                    //jToggleButton2.setText(Hand[i]);
                    jToggleButton2.setText("");
                    jToggleButton2.setIcon(icon);
                    jToggleButton2.setSelected(false);
                    jToggleButton2.setEnabled(false);
                    jToggleButton2.setDisabledIcon(icon);
                    jToggleButton2.setBorderPainted(false);
                    break;
                case 2:
                    jToggleButton3.setVisible(true);
                    //
                    //jToggleButton3.setText(Hand[i]);
                    jToggleButton3.setText("");
                    jToggleButton3.setIcon(icon);
                    jToggleButton3.setSelected(false);
                    jToggleButton3.setEnabled(false);
                    jToggleButton3.setDisabledIcon(icon);
                    jToggleButton3.setBorderPainted(false);
                    break;
                case 3:
                    jToggleButton4.setVisible(true);
                    //
                    //jToggleButton4.setText(Hand[i]);
                    jToggleButton4.setText("");
                    jToggleButton4.setIcon(icon);
                    jToggleButton4.setSelected(false);
                    jToggleButton4.setEnabled(false);
                    jToggleButton4.setDisabledIcon(icon);
                    jToggleButton4.setBorderPainted(false);
                    break;
                case 4:
                    jToggleButton5.setVisible(true);
                    //
                    //jToggleButton5.setText(Hand[i]);
                    jToggleButton5.setText("");
                    jToggleButton5.setIcon(icon);
                    jToggleButton5.setSelected(false);
                    jToggleButton5.setEnabled(false);
                    jToggleButton5.setDisabledIcon(icon);
                    jToggleButton5.setBorderPainted(false);

            }
        }
//JOptionPane.showMessageDialog(null, "Your hand is: " + "\n" + Arrays.toString(Hand));
    }

    private boolean declareResults(Player[] list) {
        jLabel15.setVisible(true);
        int finish = Main.decideWinner(list);
        if (finish == 0) {
            jLabel15.setText("You have lost the hand, better luck next time");
            return true;
        }
        if (finish == 1) {
            jLabel15.setText("You have won the hand, congratulations!");
//JOptionPane.showMessageDialog(null, "You have won the hand, congratulations! ", "Winner!", finish, null);
            return true;
        }
        if (finish == 2) {
            jLabel15.setText("No one won the hand, the game was a tie.");
//JOptionPane.showMessageDialog(null, "No one won the hand, the game was a tie.", "TIE!", finish, null);
            return false;
        }
        return false;
    }

    private int numCardsExchange() {
        int e = 0;
        for (int i = 0; i < 5; i++) {
            if (!keepCards[i]) {
                e++;
            }
        }
        return e;
    }

    private int[] exchangeIndex(int e) {
        int[] indecies = new int[e];
        int i = 0;
        for (int n = 0; n < 5; n++) {
            if (!keepCards[n]) {
                indecies[i] = n;
                i++;
            }

        }
        return indecies;
    }

    private int[] Exchange(Player current, int[] deck) {

        int e = numCardsExchange();//rewrite for gui
        int[] indecies = exchangeIndex(e);
        if (e != 0) {
            for (int i = 0; i < e; i++) {
                int[] workingHand = Main.workingHand(current.getHand());
                String[] RFV = Main.convertHand(workingHand);
                int index = indecies[i]; //rewrite for gui
                current.removeCardAtIndex(index);
            }
        }
        Main.replaceCards(current.getHandForModification(), deck);
        current.performAllChecks();
        return deck;
    }

    /**
     * Calculates the bet amount for an AI player based on their hand value and available chips.
     * @param player the AI player
     * @param currentBet the current bet amount
     * @return the new bet amount
     */
    private int calculateAIBet(Player player, int currentBet) {
        int chips = player.getChips();
        int handValue = player.getHandValue();
        int bet = currentBet;
        
        if (chips <= 0) {
            return bet;
        }
        
        int betIncrease = 0;
        if (handValue <= 38 && handValue >= 18) {
            betIncrease = 25;
        } else if (handValue > 38 && handValue <= 70) {
            betIncrease = 50;
        } else if (handValue > 70) {
            betIncrease = 100;
        } else {
            // Weak hand - just call or fold if bet is too high
            return Math.min(bet, chips);
        }
        
        bet += betIncrease;
        
        // Adjust bet if player doesn't have enough chips
        if (chips < bet) {
            if (handValue <= 38) {
                bet = chips / 4;
                if (chips % 4 != 0) {
                    bet += 1;
                }
            } else if (handValue <= 70) {
                bet = chips / 2;
                if (chips % 4 != 0) {
                    bet += 1;
                }
            } else {
                bet = chips; // All-in for strong hands
            }
        }
        
        return bet;
    }

    int bet(Player[] list, int pot, int bet) {
        for (int i = 0; i < list.length; i++) {
            int lastBet = bet;
            
            if (list[i].isFold()) {
                continue; // Skip folded players
            }
            
            if (i == 0) {
                // Human player - bet already set through UI
                Player user = list[i];
                pot += user.placeBet(bet);
                user.recordLastBet();
                if (lastBet != bet) {
                    recursiveBet(list, i, pot, bet);
                    break;
                }
            } else {
                // AI player - calculate bet automatically
                Player aiPlayer = list[i];
                bet = calculateAIBet(aiPlayer, bet);
                pot += aiPlayer.placeBet(bet);
                aiPlayer.recordLastBet();
                if (lastBet != bet) {
                    recursiveBet(list, i, pot, bet);
                    break;
                }
            }
        }
        return pot;
    }

    void recursiveBet(Player[] players, int playerIndex, int pot, int bet) {
        // Handle additional betting rounds after a raise
        int lastBet = bet;
        for (int i = 0; i < players.length; i++) {
            if (i == playerIndex || players[i].isFold()) {
                continue;
            }
            Player p = players[i];
            int chips = p.getChips();
            // Simple logic: if player has enough chips and hand is strong, call or raise; else fold
            if (chips > lastBet) {
                // Example: call the raise
                pot += p.placeBet(lastBet);
                p.recordLastBet();
            } else if (chips > 0) {
                // All-in if not enough chips to call
                pot += p.placeBet(chips);
                p.recordLastBet();
            } else {
                // Fold if no chips
                p.setFold(true);
            }
        }
        // Optionally, check if another raise occurred and repeat if needed
        // This is a basic implementation; more complex logic can be added as needed
    }

    protected ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
}
