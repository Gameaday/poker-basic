plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.compose' version '2.2.20'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jlleitschuh.gradle.ktlint'
}

/**
 * Generate dynamic version code using timestamp-based approach.
 * This ensures monotonically increasing version codes that work regardless of git history depth.
 * Uses days since epoch (June 25, 2025) plus hours to create reasonable version codes.
 * Using provider API for configuration cache compatibility.
 * 
 * IMPORTANT: Base epoch is June 25, 2025 (NOT January 1, 2024)
 * This date was chosen as the project start reference point.
 */
def getVersionCode = providers.exec {
    commandLine 'bash', '-c', '''
        # Base date: June 25, 2025 (epoch for this project)
        # IMPORTANT: This is June 25, 2025 00:00:00 UTC, not January 1, 2024
        BASE_EPOCH=1750809600  # June 25, 2025 00:00:00 UTC (Unix timestamp)
        CURRENT_EPOCH=$(date +%s)
        
        # Calculate days since base epoch
        DAYS_SINCE_BASE=$(( (CURRENT_EPOCH - BASE_EPOCH) / 86400 ))
        
        # Get current hour (0-23) to allow multiple builds per day
        CURRENT_HOUR=$(date +%H | sed 's/^0*//')
        
        # Version code = (days * 100) + hour
        # This allows up to 24 builds per day with predictable incrementing
        VERSION_CODE=$(( (DAYS_SINCE_BASE * 100) + CURRENT_HOUR ))
        
        # Ensure minimum version code of 100 (for compatibility)
        if [ "$VERSION_CODE" -lt 100 ]; then
            VERSION_CODE=100
        fi
        
        echo "$VERSION_CODE"
    '''
}.standardOutput.asText.map { 
    def versionCode = it.trim().toInteger()
    // Ensure reasonable bounds for Android version codes
    return versionCode > 0 ? versionCode : 100
}

android {
    namespace 'com.pokermon.android'
    compileSdk 36
    compileSdkVersion 36  // Explicit specification for new Gradle plugin
    buildToolsVersion "35.0.0"

    defaultConfig {
        applicationId "com.pokermon.android"
        minSdk 28
        targetSdk 35  // Updated to stable API 35 (Android 15)
        versionCode getVersionCode.get() // Dynamic version code based on timestamp
        versionName rootProject.version // Use consistent version across all modules

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Optimize for API 28+ features
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Faster debug builds
            minifyEnabled false
            debuggable true
            // Use debug suffix to avoid package conflicts with release builds
            applicationIdSuffix ".debug"
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }
    
    buildFeatures {
        compose true
        buildConfig = true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.15'
    }
    
    // Optimization settings for faster builds
    packagingOptions {
        resources {
            excludes += ['/META-INF/{AL2.0,LGPL2.1}']
        }
    }
    
    // Remove source inclusion since we're using module dependency
    /*
    sourceSets {
        main {
            java {
                srcDirs += '../shared/src/main/kotlin'
                srcDirs += '../shared/src/main/java'
            }
        }
    }
    */
}

dependencies {
    // Shared module dependency
    implementation project(':shared')
    
    // Kotlin-native dependencies - aligned with main project
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.2.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    
    // Android and UI dependencies - Conservative stable updates
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.4'
    implementation 'androidx.activity:activity-compose:1.11.0'
    implementation platform('androidx.compose:compose-bom:2025.10.01')

    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    
    // Navigation for Compose - aligned with lifecycle version
    implementation 'androidx.navigation:navigation-compose:2.9.5'
    
    // Asset and Audio System Dependencies - Phase 2 Implementation
    implementation 'androidx.media:media:1.7.1'
    implementation 'io.coil-kt:coil-compose:2.7.0'
    
    // Enhanced lifecycle support for audio management
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.4'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.9.4'
    
    // Kotlinx Serialization for save/load functionality
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2025.10.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Ktlint configuration for Android code quality
ktlint {
    version = "1.0.1"
    android = true
    debug = false
    verbose = true
    outputToConsole = true
    reporters {
        reporter "checkstyle"
        reporter "plain"
    }
}

// Android linting configuration
android.lintOptions {
    abortOnError false
    checkReleaseBuilds false
    ignoreWarnings true
}

// Linting tasks for Android
task androidLint {
    group = 'verification'
    description = 'Run Android lint checks'
    dependsOn ktlintCheck, 'lint'
}

task androidLintFix {
    group = 'formatting'
    description = 'Fix Android linting issues automatically'
    dependsOn ktlintFormat
}

// Task to package Android APK with proper naming
task packageAndroidApk {
    group = 'native'
    description = 'Package Android APK with proper naming'
    dependsOn 'assembleDebug'
    
    doLast {
        println "=== Android APK Packaging ==="
        
        def buildDir = new File(project.buildDir, 'distributions')
        buildDir.mkdirs()
        
        def apkDir = new File(project.buildDir, 'outputs/apk/debug')
        def sourceApk = apkDir.listFiles()
            ?.find { it.name.endsWith('-debug.apk') }
        
        if (sourceApk && sourceApk.exists()) {
            // Create uncompressed APK (generic name)
            def uncompressedFile = new File(buildDir, 'pokermon.apk')
            uncompressedFile.bytes = sourceApk.bytes
            
            // Create compressed versions with version info
            def version = android.defaultConfig.versionName
            def isDevelopment = project.hasProperty('developmentBuild') && project.developmentBuild
            def compressedName = isDevelopment ? 
                "Pokermon-${version}-debug.apk" : 
                "Pokermon-${version}.apk"
            
            def compressedFile = new File(buildDir, compressedName)
            compressedFile.bytes = sourceApk.bytes
            
            println "Android APK created:"
            println "  Source: ${sourceApk.absolutePath}"
            println "  Uncompressed: ${uncompressedFile.absolutePath}"
            println "  Compressed: ${compressedFile.absolutePath}"
        } else {
            println "Warning: Could not find debug APK in ${apkDir}"
            println "Available files:"
            apkDir.listFiles()?.each { println "  ${it.name}" }
        }
    }
}