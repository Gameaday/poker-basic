// Pokermon - Pure Kotlin-Native Cross-Platform Build
// Top-level build file for pure Kotlin-native development
import java.text.SimpleDateFormat
import java.util.Date

// Dynamic version calculation without git dependency
def calculateVersion() {
    def major = project.findProperty('app.version.major') ?: '1'
    def minor = project.findProperty('app.version.minor') ?: '1'  
    def patch = project.findProperty('app.version.patch') ?: '0'
    def timestamp = new SimpleDateFormat('yyyyMMdd').format(new Date())
    return "${major}.${minor}.${patch}.${timestamp}"
}

// Set dynamic version for all projects
allprojects {
    version = calculateVersion()
    group = 'com.pokermon'
}

// Java home detection and configuration
def findJavaHome() {
    // Priority list of Java 21 locations
    def java21Paths = [
        System.getenv('JAVA_HOME_21_X64'),
        '/usr/lib/jvm/temurin-21-jdk-amd64',
        '/usr/lib/jvm/java-21-openjdk',
        '/usr/lib/jvm/java-21-temurin'
    ]
    
    for (String path : java21Paths) {
        if (path && new File(path).exists() && new File(path, 'bin/java').exists()) {
            println("✅ Using Java 21: ${path}")
            return path
        }
    }
    
    // Fallback to Java 17 if Java 21 not available
    def java17Paths = [
        System.getenv('JAVA_HOME_17_X64'),
        '/usr/lib/jvm/temurin-17-jdk-amd64',
        '/usr/lib/jvm/java-17-openjdk'
    ]
    
    for (String path : java17Paths) {
        if (path && new File(path).exists() && new File(path, 'bin/java').exists()) {
            println("⚠️  Using Java 17 fallback: ${path}")
            return path
        }
    }
    
    // Final fallback to current JAVA_HOME
    def currentJavaHome = System.getenv('JAVA_HOME')
    if (currentJavaHome && new File(currentJavaHome).exists()) {
        println("⚠️  Using current JAVA_HOME: ${currentJavaHome}")
        return currentJavaHome
    }
    
    println("❌ No suitable Java installation found")
    return null
}

// Apply Java home configuration if not already set in gradle.properties
if (!project.hasProperty('org.gradle.java.home')) {
    def detectedJavaHome = findJavaHome()
    if (detectedJavaHome) {
        System.setProperty('org.gradle.java.home', detectedJavaHome)
    }
}

buildscript {
    ext.kotlin_version = '2.2.10'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

allprojects {
    // Apply Kotlin configuration to all projects
    afterEvaluate {
        if (plugins.hasPlugin('org.jetbrains.kotlin.android') || 
            plugins.hasPlugin('org.jetbrains.kotlin.jvm') ||
            plugins.hasPlugin('org.jetbrains.kotlin.multiplatform')) {
            
            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                kotlinOptions {
                    jvmTarget = '21'
                    freeCompilerArgs += [
                        '-Xjsr305=strict',
                        '-opt-in=kotlin.ExperimentalStdlibApi'
                    ]
                }
            }
        }
    }
}

// Standard cleanup task
tasks.register('clean', Delete) {
    delete layout.buildDirectory
    delete fileTree(dir: '.', include: 'app/build')
}

// Enhanced verification for pure Kotlin-native architecture - Updated for Gradle 9 compatibility
tasks.register('verifyKotlinNativeSetup') {
    group = 'verification'
    description = 'Verifies pure Kotlin-native build configuration without Maven dependencies'
    
    doLast {
        println "=== Pure Kotlin-Native Architecture Verification ==="
        println "Project: Pokermon"
        println "Version: ${project.version} (dynamic, no git dependency)"
        
        // Check Kotlin source setup
        def kotlinSourcePath = 'shared/src/main/kotlin/com/pokermon'
        def kotlinSource = new File(rootDir, kotlinSourcePath)
        
        if (kotlinSource.exists()) {
            def kotlinFiles = kotlinSource.listFiles().findAll { it.name.endsWith('.kt') }
            println "✅ Kotlin source: ${kotlinFiles.size()} files in com.pokermon package"
            
            // Check for key Kotlin-native classes
            def keyClasses = ['Monster.kt', 'MonsterDatabase.kt', 'GameEngine.kt', 'Player.kt']
            keyClasses.each { className ->
                if (new File(kotlinSource, className).exists()) {
                    println "✅ ${className} - Kotlin-native implementation ready"
                } else {
                    println "⚠️  ${className} - needs migration"
                }
            }
        } else {
            println "❌ Kotlin source directory missing"
        }
        
        // Check for Maven removal 
        def pomFile = new File(rootDir, 'shared/pom.xml')
        if (pomFile.exists()) {
            println "⚠️  Maven pom.xml still present - will be removed in pure Kotlin-native migration"
        } else {
            println "✅ No Maven dependencies - pure Gradle/Kotlin-native"
        }
        
        // Check Android/Gradle setup
        def androidBuildGradlePath = 'android/build.gradle'
        def gradleWrapperPath = 'gradlew'
        def androidActivityPath = 'android/src/main/java/com/pokermon/android/MainActivity.kt'
        
        def androidBuildGradle = new File(rootDir, androidBuildGradlePath)
        def gradleWrapper = new File(rootDir, gradleWrapperPath)
        def androidActivity = new File(rootDir, androidActivityPath)
        
        if (androidBuildGradle.exists() && gradleWrapper.exists() && androidActivity.exists()) {
            println "✅ Android/Gradle build configuration complete"
            println "   Build command: ./gradlew :android:assembleDebug"
        } else {
            println "⚠️  Android build configuration needs setup"
        }
        
        println ""
        println "=== Build Commands (Pure Kotlin-Native) ==="
        println "Android APK:      ./gradlew :android:assembleDebug (requires internet)"
        println "Desktop JAR:      ./gradlew :shared:fatJar"
        println "Console App:      ./gradlew :shared:runConsole"
        println "Run Tests:        ./gradlew :shared:test"
        println "Clean All:        ./gradlew clean"
        println ""
        println "✅ Pure Kotlin-native cross-platform architecture verified!"
    }
}