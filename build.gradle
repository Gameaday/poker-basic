// Pokermon - Pure Kotlin-Native Cross-Platform Build
// Top-level build file for pure Kotlin-native development
import java.text.SimpleDateFormat
import java.util.Date

// Dynamic version calculation without git dependency
def calculateVersion() {
    def major = project.findProperty('app.version.major') ?: '1'
    def minor = project.findProperty('app.version.minor') ?: '1'  
    def patch = project.findProperty('app.version.patch') ?: '0'
    def timestamp = new SimpleDateFormat('yyyyMMdd').format(new Date())
    return "${major}.${minor}.${patch}.${timestamp}"
}

// Set dynamic version for all projects
allprojects {
    version = calculateVersion()
    group = 'com.pokermon'
}

buildscript {
    ext.kotlin_version = '1.9.22'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    
    // Apply Kotlin configuration to all projects
    afterEvaluate {
        if (plugins.hasPlugin('org.jetbrains.kotlin.android') || 
            plugins.hasPlugin('org.jetbrains.kotlin.jvm') ||
            plugins.hasPlugin('org.jetbrains.kotlin.multiplatform')) {
            
            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
                kotlinOptions {
                    jvmTarget = '17'
                    freeCompilerArgs += [
                        '-Xjsr305=strict',
                        '-opt-in=kotlin.ExperimentalStdlibApi'
                    ]
                }
            }
        }
    }
}

// Standard cleanup task
task clean(type: Delete) {
    delete rootProject.buildDir
    delete fileTree(dir: '.', include: 'app/build')
}

// Enhanced verification for pure Kotlin-native architecture
task verifyKotlinNativeSetup {
    group = 'verification'
    description = 'Verifies pure Kotlin-native build configuration without Maven dependencies'
    
    doLast {
        println "=== Pure Kotlin-Native Architecture Verification ==="
        println "Project: Pokermon"
        println "Version: ${rootProject.version} (dynamic, no git dependency)"
        
        // Check Kotlin source setup
        def kotlinSourcePath = 'Poker-Basic/src/main/kotlin/com/pokermon'
        def kotlinSource = new File(kotlinSourcePath)
        
        if (kotlinSource.exists()) {
            def kotlinFiles = kotlinSource.listFiles().findAll { it.name.endsWith('.kt') }
            println "✅ Kotlin source: ${kotlinFiles.size()} files in com.pokermon package"
            
            // Check for key Kotlin-native classes
            def keyClasses = ['Monster.kt', 'MonsterDatabase.kt', 'GameEngine.kt', 'Player.kt']
            keyClasses.each { className ->
                if (new File(kotlinSource, className).exists()) {
                    println "✅ ${className} - Kotlin-native implementation ready"
                } else {
                    println "⚠️  ${className} - needs migration"
                }
            }
        } else {
            println "❌ Kotlin source directory missing"
        }
        
        // Check for Maven removal 
        def pomFile = new File('Poker-Basic/pom.xml')
        if (pomFile.exists()) {
            println "⚠️  Maven pom.xml still present - will be removed in pure Kotlin-native migration"
        } else {
            println "✅ No Maven dependencies - pure Gradle/Kotlin-native"
        }
        
        // Check Android/Gradle setup
        def androidBuildGradlePath = 'android/build.gradle'
        def gradleWrapperPath = 'gradlew'
        def androidActivityPath = 'android/src/main/java/com/pokermon/android/MainActivity.kt'
        
        def androidBuildGradle = new File(androidBuildGradlePath)
        def gradleWrapper = new File(gradleWrapperPath)
        def androidActivity = new File(androidActivityPath)
        
        if (androidBuildGradle.exists() && gradleWrapper.exists() && androidActivity.exists()) {
            println "✅ Android/Gradle build configuration complete"
            println "   Build command: ./gradlew :android:assembleDebug"
        } else {
            println "⚠️  Android build configuration needs setup"
        }
        
        println ""
        println "=== Build Commands (Pure Kotlin-Native) ==="
        println "Android APK:      ./gradlew :android:assembleDebug (requires internet)"
        println "Desktop Native:   ./gradlew :desktop:createNativeExecutable"
        println "Run Desktop:      ./gradlew :desktop:run"
        println "Clean All:        ./gradlew clean"
        println ""
        println "✅ Pure Kotlin-native cross-platform architecture verified!"
    }
}