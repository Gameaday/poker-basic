// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.4.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22'
    }
}

// Standard cleanup task
task clean(type: Delete) {
    delete rootProject.buildDir
    delete fileTree(dir: '.', include: 'app/build')
}

// Verification task that works offline
task verifyDualPlatformSetup {
    group = 'verification'
    description = 'Verifies that both Java/Maven and Android/Gradle configurations are ready'
    
    doLast {
        println "=== Dual Platform Build Setup Verification ==="
        
        // Check Java/Maven setup
        def pomPath = 'Poker-Basic/pom.xml'
        def pomFile = new File(pomPath)
        if (pomFile.exists()) {
            println "✅ Java/Maven build: ${pomPath}"
            println "   Build command: cd Poker-Basic && mvn clean package"
        } else {
            println "❌ Java/Maven pom.xml not found"
        }
        
        // Check Android/Gradle setup
        def androidManifestPath = 'android/src/main/AndroidManifest.xml'
        def androidBuildGradlePath = 'android/build.gradle'
        def gradleWrapperPath = 'gradlew'
        def androidActivityPath = 'android/src/main/java/com/pokermon/android/MainActivity.kt'
        
        def androidManifest = new File(androidManifestPath)
        def androidBuildGradle = new File(androidBuildGradlePath)
        def gradleWrapper = new File(gradleWrapperPath)
        def androidActivity = new File(androidActivityPath)
        
        if (androidManifest.exists() && androidBuildGradle.exists() && gradleWrapper.exists() && androidActivity.exists()) {
            println "✅ Android/Gradle build configuration complete:"
            println "   - AndroidManifest.xml: ${androidManifest.exists()}"
            println "   - android/build.gradle: ${androidBuildGradle.exists()}"
            println "   - Gradle wrapper: ${gradleWrapper.exists()}"
            println "   - MainActivity.kt: ${androidActivity.exists()}"
            println "   Build command: ./gradlew :android:assembleDebug"
        } else {
            println "❌ Android build configuration incomplete"
            println "   Missing files:"
            if (!androidManifest.exists()) println "   - AndroidManifest.xml"
            if (!androidBuildGradle.exists()) println "   - android/build.gradle"
            if (!gradleWrapper.exists()) println "   - gradlew"
            if (!androidActivity.exists()) println "   - MainActivity.kt"
        }
        
        // Check shared source integration
        def sharedJavaSourcePath = 'Poker-Basic/src/main/java/com/pokermon'
        def sharedJavaSource = new File(sharedJavaSourcePath)
        if (sharedJavaSource.exists()) {
            def javaFiles = sharedJavaSource.listFiles().findAll { it.name.endsWith('.java') }
            println "✅ Shared Java source: ${javaFiles.size()} files in com.pokermon package"
            println "   Shared files: ${javaFiles.collect { it.name }.join(', ')}"
        }
        
        println ""
        println "=== Network Status ==="
        try {
            // Simple network check - will work in environments with network access
            def networkAvailable = "ping -c 1 google.com".execute().waitFor() == 0
            println "Internet connectivity: ${networkAvailable ? 'Available' : 'Limited/Offline'}"
        } catch (Exception e) {
            println "Internet connectivity: Limited/Offline"
        }
        
        println ""
        println "=== Build Instructions ==="
        println "JAR (Desktop):  cd Poker-Basic && mvn clean package"
        println "EXE (Windows):  cd Poker-Basic && mvn package -Pwindows-exe -DskipTests"
        println "DEB (Linux):    cd Poker-Basic && mvn package -Plinux-exe -DskipTests"
        println "DMG (macOS):    cd Poker-Basic && mvn package -Pmacos-exe -DskipTests"
        println "APK (Android):  ./gradlew :android:assembleDebug (requires internet)"
        println ""
        println "✅ Cross-platform build support configured successfully!"
    }
}