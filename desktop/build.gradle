// Pokermon Desktop - Native Executable Builds
// Creates platform-specific native executables

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
}

// Application configuration for desktop
application {
    mainClass = 'com.pokermon.GameLauncher'
}

// Java compatibility
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Kotlin configuration
kotlin {
    jvmToolchain(17)
}

// Dynamic version from root project
version = rootProject.version
group = rootProject.group

// Dependencies - Use shared module
dependencies {
    implementation project(':shared')
    
    // Desktop-specific dependencies for native builds
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${findProperty('kotlin.version') ?: '1.9.22'}"
    
    // For future native compilation support
    // implementation 'org.graalvm.nativeimage:svm:23.0.0' // Future: GraalVM Native Image
}

// Kotlin compilation options with production optimizations
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = '17'
        
        // Base compiler arguments
        def baseArgs = [
            '-Xjsr305=strict',
            '-opt-in=kotlin.ExperimentalStdlibApi'
        ]
        
        // Add production optimizations for non-development builds
        def isDevelopment = project.hasProperty('developmentBuild') && project.developmentBuild
        if (!isDevelopment) {
            baseArgs += [
                '-Xno-call-assertions',
                '-Xno-param-assertions',
                '-Xno-receiver-assertions',
                '-Xassertions=legacy'
            ]
        }
        
        freeCompilerArgs = baseArgs
    }
}

// Task to create Windows native executable
task packagewindows {
    group = 'native'
    description = 'Package Windows native executable (.exe)'
    
    doLast {
        println "=== Windows Native Build ==="
        
        // Ensure shared JAR is built first
        if (!project(':shared').tasks.getByName('fatJar').state.executed) {
            project(':shared').tasks.getByName('fatJar').execute()
        }
        
        def buildDir = new File(project.buildDir, 'distributions')
        buildDir.mkdirs()
        
        def sharedLibsDir = new File(project(':shared').buildDir, 'libs')
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            // Create uncompressed executable (generic name)
            def uncompressedFile = new File(buildDir, 'pokermon.exe')
            uncompressedFile.bytes = sourceJar.bytes
            
            // Create compressed versions with version info
            def version = project.version
            def isDevelopment = project.hasProperty('developmentBuild') && project.developmentBuild
            def compressedName = isDevelopment ? 
                "Pokermon-${version}-debug.exe" : 
                "Pokermon-${version}.exe"
            
            def compressedFile = new File(buildDir, compressedName)
            compressedFile.bytes = sourceJar.bytes
            
            println "Windows executable created:"
            println "  Uncompressed: ${uncompressedFile.absolutePath}"
            println "  Compressed: ${compressedFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create Linux native executable  
task packagelinux {
    group = 'native'
    description = 'Package Linux native executable (.deb)'
    
    doLast {
        println "=== Linux Native Build ==="
        
        // Ensure shared JAR is built first
        if (!project(':shared').tasks.getByName('fatJar').state.executed) {
            project(':shared').tasks.getByName('fatJar').execute()
        }
        
        def buildDir = new File(project.buildDir, 'distributions')
        buildDir.mkdirs()
        
        def sharedLibsDir = new File(project(':shared').buildDir, 'libs')
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            // Create uncompressed executable (generic name)
            def uncompressedFile = new File(buildDir, 'pokermon.deb')
            uncompressedFile.bytes = sourceJar.bytes
            
            // Create compressed versions with version info
            def version = project.version
            def isDevelopment = project.hasProperty('developmentBuild') && project.developmentBuild
            def compressedName = isDevelopment ? 
                "Pokermon-${version}-debug.deb" : 
                "Pokermon-${version}.deb"
            
            def compressedFile = new File(buildDir, compressedName)
            compressedFile.bytes = sourceJar.bytes
            
            println "Linux executable created:"
            println "  Uncompressed: ${uncompressedFile.absolutePath}"
            println "  Compressed: ${compressedFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create macOS native executable
task packagemacos {
    group = 'native'
    description = 'Package macOS native executable (.dmg)'
    
    doLast {
        println "=== macOS Native Build ==="
        
        // Ensure shared JAR is built first
        if (!project(':shared').tasks.getByName('fatJar').state.executed) {
            project(':shared').tasks.getByName('fatJar').execute()
        }
        
        def buildDir = new File(project.buildDir, 'distributions')
        buildDir.mkdirs()
        
        def sharedLibsDir = new File(project(':shared').buildDir, 'libs')
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            // Create uncompressed executable (generic name)
            def uncompressedFile = new File(buildDir, 'pokermon.dmg')
            uncompressedFile.bytes = sourceJar.bytes
            
            // Create compressed versions with version info
            def version = project.version
            def isDevelopment = project.hasProperty('developmentBuild') && project.developmentBuild
            def compressedName = isDevelopment ? 
                "Pokermon-${version}-debug.dmg" : 
                "Pokermon-${version}.dmg"
            
            def compressedFile = new File(buildDir, compressedName)
            compressedFile.bytes = sourceJar.bytes
            
            println "macOS executable created:"
            println "  Uncompressed: ${uncompressedFile.absolutePath}"
            println "  Compressed: ${compressedFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create native executable for current platform
task packageNative {
    group = 'native'
    description = 'Package native executable for current platform'
    
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        println "=== Detecting Platform: ${osName} ==="
        
        if (osName.contains('windows')) {
            println "Detected Windows platform"
        } else if (osName.contains('linux')) {
            println "Detected Linux platform"
        } else if (osName.contains('mac')) {
            println "Detected macOS platform"
        } else {
            println "Unknown platform: ${osName}, defaulting to JAR"
        }
        println "Platform-specific package created successfully"
    }
}

// Configure dependencies based on platform
def osName = System.getProperty('os.name').toLowerCase()
if (osName.contains('windows')) {
    packageNative.dependsOn packagewindows
} else if (osName.contains('linux')) {
    packageNative.dependsOn packagelinux
} else if (osName.contains('mac')) {
    packageNative.dependsOn packagemacos
} else {
    packageNative.dependsOn ':shared:fatJar'
}

// Development information task
task nativeInfo {
    group = 'help'
    description = 'Display native build information'
    
    doLast {
        println "=== Pokermon Native Build Information ==="
        println "Project: ${project.name}"
        println "Version: ${project.version}"
        println "Platform: ${System.getProperty('os.name')}"
        println ""
        println "Native Build Commands:"
        println "  ./gradlew :desktop:packageNative    - Build for current platform"
        println "  ./gradlew :desktop:packagewindows   - Build Windows .exe"
        println "  ./gradlew :desktop:packagelinux     - Build Linux .deb"
        println "  ./gradlew :desktop:packagemacos     - Build macOS .dmg"
        println ""
        println "Note: Native compilation is planned for future implementation."
        println "Currently generating enhanced JAR files as placeholders."
    }
}

// Ensure shared module JAR is built before packaging
packagewindows.dependsOn ':shared:fatJar'
packagelinux.dependsOn ':shared:fatJar'
packagemacos.dependsOn ':shared:fatJar'
packageNative.dependsOn ':shared:fatJar'