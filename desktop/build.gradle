// Pokermon Desktop - Native Executable Builds
// Creates platform-specific native executables

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'application'
}

// Application configuration for desktop
application {
    mainClass = 'com.pokermon.GameLauncher'
}

// Java compatibility
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Kotlin configuration
kotlin {
    jvmToolchain(17)
}

// Dynamic version from root project
version = rootProject.version
group = rootProject.group

// Dependencies - Use shared module
dependencies {
    implementation project(':shared')
    
    // Desktop-specific dependencies for native builds
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${findProperty('kotlin.version') ?: '1.9.22'}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${findProperty('kotlinx.coroutines.version') ?: '1.7.3'}"
    
    // For future native compilation support
    // implementation 'org.graalvm.nativeimage:svm:23.0.0' // Future: GraalVM Native Image
}

// Kotlin compilation options
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            '-Xjsr305=strict',
            '-opt-in=kotlin.ExperimentalStdlibApi'
        ]
    }
}

// Task to create Windows native executable (placeholder)
tasks.register('packageWindows') {
    group = 'native'
    description = 'Package Windows native executable (.exe)'
    dependsOn ':shared:fatJar'
    
    doLast {
        println "=== Windows Native Build (Future Implementation) ==="
        println "Currently creating enhanced JAR for Windows compatibility"
        
        def buildDir = layout.buildDirectory.dir('distributions').get().asFile
        buildDir.mkdirs()
        
        def sharedLibsDir = project(':shared').layout.buildDirectory.dir('libs').get().asFile
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            def targetFile = new File(buildDir, 'pokermon-windows.exe')
            // Copy instead of rename to preserve original
            targetFile.bytes = sourceJar.bytes
            println "Windows executable placeholder created: ${targetFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create Linux native executable (placeholder)  
tasks.register('packageLinux') {
    group = 'native'
    description = 'Package Linux native executable (.deb)'
    dependsOn ':shared:fatJar'
    
    doLast {
        println "=== Linux Native Build (Future Implementation) ==="
        println "Currently creating enhanced JAR for Linux compatibility"
        
        def buildDir = layout.buildDirectory.dir('distributions').get().asFile
        buildDir.mkdirs()
        
        def sharedLibsDir = project(':shared').layout.buildDirectory.dir('libs').get().asFile
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            def targetFile = new File(buildDir, 'pokermon-linux.deb')
            // Copy instead of rename to preserve original
            targetFile.bytes = sourceJar.bytes
            println "Linux executable placeholder created: ${targetFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create macOS native executable (placeholder)
tasks.register('packageMacOS') {
    group = 'native'
    description = 'Package macOS native executable (.dmg)'
    dependsOn ':shared:fatJar'
    
    doLast {
        println "=== macOS Native Build (Future Implementation) ==="
        println "Currently creating enhanced JAR for macOS compatibility"
        
        def buildDir = layout.buildDirectory.dir('distributions').get().asFile
        buildDir.mkdirs()
        
        def sharedLibsDir = project(':shared').layout.buildDirectory.dir('libs').get().asFile
        def sourceJar = sharedLibsDir.listFiles()
            ?.find { it.name.endsWith('-fat.jar') }
        
        if (sourceJar && sourceJar.exists()) {
            def targetFile = new File(buildDir, 'pokermon-macos.dmg')
            // Copy instead of rename to preserve original
            targetFile.bytes = sourceJar.bytes
            println "macOS executable placeholder created: ${targetFile.absolutePath}"
        } else {
            throw new GradleException("Could not find fat JAR in ${sharedLibsDir}")
        }
    }
}

// Task to create native executable for current platform
tasks.register('packageNative') {
    group = 'native'
    description = 'Package native executable for current platform'
    dependsOn ':shared:fatJar'
    
    doLast {
        def osName = System.getProperty('os.name').toLowerCase()
        println "=== Detecting Platform: ${osName} ==="
        
        if (osName.contains('windows')) {
            tasks.packageWindows.actions.each { it.execute(tasks.packageWindows) }
        } else if (osName.contains('linux')) {
            tasks.packageLinux.actions.each { it.execute(tasks.packageLinux) }
        } else if (osName.contains('mac')) {
            tasks.packageMacOS.actions.each { it.execute(tasks.packageMacOS) }
        } else {
            println "Unknown platform: ${osName}, defaulting to JAR"
            // JAR already built due to dependsOn
        }
    }
}

// Development information task
tasks.register('nativeInfo') {
    group = 'help'
    description = 'Display native build information'
    
    doLast {
        println "=== Pokermon Native Build Information ==="
        println "Project: ${project.name}"
        println "Version: ${project.version}"
        println "Platform: ${System.getProperty('os.name')}"
        println ""
        println "Native Build Commands:"
        println "  ./gradlew :desktop:packageNative    - Build for current platform"
        println "  ./gradlew :desktop:packageWindows   - Build Windows .exe"
        println "  ./gradlew :desktop:packageLinux     - Build Linux .deb"
        println "  ./gradlew :desktop:packageMacOS     - Build macOS .dmg"
        println ""
        println "Note: Native compilation is planned for future implementation."
        println "Currently generating enhanced JAR files as placeholders."
    }
}

// Remove old dependency declarations since they're now handled in task definitions