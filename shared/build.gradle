// Pokermon Shared - Pure Kotlin-Native Core Module with Multiplatform Support
// Implements true native compilation for all platforms

plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

// Kotlin Multiplatform configuration for native builds
kotlin {
    // Configure JVM toolchain at the extension level
    jvmToolchain(21)
    
    // JVM target for JAR compatibility and testing
    jvm {
        testRuns["test"].executionTask.configure {
            useJUnitPlatform()
        }
    }
    
    // Native targets for true native compilation
    linuxX64("nativeLinux") {
        binaries {
            executable {
                entryPoint = 'com.pokermon.main'
                baseName = 'pokermon-linux'
            }
        }
    }
    
    macosX64("nativeMacOS") {
        binaries {
            executable {
                entryPoint = 'com.pokermon.main'
                baseName = 'pokermon-macos'
            }
        }
    }
    
    macosArm64("nativeMacOSArm") {
        binaries {
            executable {
                entryPoint = 'com.pokermon.main'
                baseName = 'pokermon-macos-arm64'
            }
        }
    }
    
    mingwX64("nativeWindows") {
        binaries {
            executable {
                entryPoint = 'com.pokermon.main'
                baseName = 'pokermon-windows'
            }
        }
    }
    
    // Source sets for multiplatform
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${findProperty('kotlinx.coroutines.version') ?: '1.10.1'}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0"
            }
        }
        
        commonTest {
            dependencies {
                implementation kotlin('test')
            }
        }
        
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:${findProperty('kotlin.version') ?: '2.2.10'}"
            }
        }
        
        jvmTest {
            dependencies {
                implementation platform('org.junit:junit-bom:5.11.3')
                implementation 'org.junit.jupiter:junit-jupiter'
                implementation 'org.junit.platform:junit-platform-launcher'
                implementation "org.jetbrains.kotlin:kotlin-test-junit5:${findProperty('kotlin.version') ?: '2.2.10'}"
            }
        }
        
        nativeLinuxMain {
        }
        
        nativeMacOSMain {
        }
        
        nativeMacOSArmMain {
        }
        
        nativeWindowsMain {
        }
    }
}

// Dynamic version from root project
version = rootProject.version
group = rootProject.group

// Enhanced JVM test configuration
tasks.named('jvmTest') {
    maxParallelForks = Runtime.runtime.availableProcessors()
    
    // Test logging
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
    
    // System properties for tests
    systemProperty 'kotlin.test.junit5.displayMode', 'verbose'
}

// Handle duplicate resources for JVM target
tasks.named('jvmProcessResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// JVM Fat JAR for standalone execution - Updated for multiplatform
tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Creates executable JAR with all dependencies'
    dependsOn 'jvmJar'
    
    archiveClassifier = 'fat'
    from kotlin.jvm().compilations.main.output
    
    dependsOn configurations.jvmRuntimeClasspath
    from {
        configurations.jvmRuntimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    
    manifest {
        attributes(
            'Implementation-Title': 'Pokermon Kotlin-Native',
            'Implementation-Version': project.version,
            'Main-Class': 'com.pokermon.GameLauncher',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().toString(),
            'Kotlin-Version': findProperty('kotlin.version') ?: '2.2.10'
        )
    }
    
    // Exclude duplicate files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Task to run console version - Updated for multiplatform
tasks.register('runConsole', JavaExec) {
    group = 'application'
    description = 'Run Pokermon in console mode'
    dependsOn 'jvmJar'
    classpath = kotlin.jvm().compilations.main.runtimeDependencyFiles
    mainClass = 'com.pokermon.ConsoleMainKt'
    args '--basic'
}

// Task for development builds with version info - Updated for Gradle 9 compatibility
tasks.register('developmentInfo') {
    group = 'help'
    description = 'Display development information'
    
    doLast {
        println "=== Pokermon Kotlin-Native Development Info ==="
        println "Project: ${project.name}"
        println "Version: ${project.version}"
        println "Kotlin: ${findProperty('kotlin.version') ?: '2.2.10'}"
        println "Main class: ${application.mainClass.get()}"
        println ""
        println "Available tasks:"
        println "  ./gradlew :shared:fatJar       - Build executable JAR"
        println "  ./gradlew :shared:runConsole   - Run console version"
        println "  ./gradlew :shared:test         - Run tests"
        println "  ./gradlew :shared:run          - Run GUI version"
    }
}

// Kotlin compilation options - Updated for Java 21 and Gradle 9
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = '21'
        freeCompilerArgs += [
            '-Xjsr305=strict',
            '-opt-in=kotlin.ExperimentalStdlibApi',
            '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi'
        ]
    }
}